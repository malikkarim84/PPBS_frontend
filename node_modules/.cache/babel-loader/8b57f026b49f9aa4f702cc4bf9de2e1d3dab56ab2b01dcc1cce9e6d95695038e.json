{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport jwt_decode, { jwtDecode } from \"jwt-decode\";\nimport { useHistory } from 'react-router-dom';\nconst Dashboard = () => {\n  _s();\n  const [name, setName] = useState();\n  const [token, setToken] = useState();\n  // const [expire, setExpire] = useState();\n  // const [users, setUsers] = useState([]);\n  // const history = useNavigate();\n\n  useEffect(() => {\n    refreshToken();\n  }, []);\n  const refreshToken = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/token');\n      setToken(response.data.accessToken);\n      const decoded = jwtDecode(token);\n      console.log(decoded);\n      //     setExpire(decoded.exp);\n    } catch (error) {\n      // //     if(error.response){\n      // //       history(\"/\");\n    }\n  };\n};\n\n// const axiosJWT = axios.create();\n\n// axiosJWT.interceptors.request.use(async(config) => {\n//   const currentDate = new Date();\n//   if (expire * 1000 < currentDate.getTime()) {\n//     const response = await axios.get('http://localhost:5000/token');\n//     config.headers.Authorization = `Bearer ${response.data.accessToken}`;\n//     setToken(response.data.accessToken);\n//     const decoded = jwtDecode(response.data.accessToken);\n//     setName(decoded.name);\n//     setExpire(decoded.exp);\n\n//   }\n//   return config;\n// }, (error)=> {\n//   return Promise.reject(error);\n// });\n\n// const getUsers = useCallback(async() => {\n//   try {\n//   const response = await axiosJWT.get('http://localhost:5000/users', {\n//     headers: {\n//       Authorization: `Bearer ${token}`,\n//     }\n//   });\n//   console.log(response.data);\n// } catch (error) {\n//   console.error(error);\n// }\n// }, [axiosJWT, token]);\n\n// return (\n//   <div className='container mt-5'>\n//       <h1>Welcome Back: </h1>\n//   </div>\n//         <button onClick={getUsers} className='button is-info'>Get Users</button>\n//         <table className='table is-striped is-fullwidth'>\n//           <thead>\n//             <tr>\n//               <th>No</th>\n//               <th>Name</th>\n//               <th>Email</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             { users.map((user, index) => (\n//                 <tr key={user.id}>\n//                   <td>{index + 1}</td>\n//                   <td>{user.name}</td>\n//                   <td>{user.email}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//     </div>\n//  )\n// }\n_s(Dashboard, \"AzA21bKp/S40UmqTpsQHFg51arI=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jwt_decode","jwtDecode","useHistory","Dashboard","_s","name","setName","token","setToken","refreshToken","response","get","data","accessToken","decoded","console","log","error","_c","$RefreshReg$"],"sources":["C:/Projek_PPS/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport jwt_decode, { jwtDecode } from \"jwt-decode\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Dashboard  = () => {\r\n  const [name, setName] = useState();\r\n  const [token, setToken] = useState(); \r\n  // const [expire, setExpire] = useState();\r\n  // const [users, setUsers] = useState([]);\r\n  // const history = useNavigate();\r\n  \r\n  useEffect(() => {\r\n    refreshToken();\r\n  }, []);\r\n\r\n  const refreshToken = async() => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/token');\r\n      setToken(response.data.accessToken);\r\n      const decoded = jwtDecode(token);\r\n      console.log(decoded);\r\n  //     setExpire(decoded.exp);\r\n    } catch (error) {\r\n  // //     if(error.response){\r\n  // //       history(\"/\");\r\n      }\r\n    }\r\n  }\r\n\r\n  // const axiosJWT = axios.create();\r\n\r\n  // axiosJWT.interceptors.request.use(async(config) => {\r\n  //   const currentDate = new Date();\r\n  //   if (expire * 1000 < currentDate.getTime()) {\r\n  //     const response = await axios.get('http://localhost:5000/token');\r\n  //     config.headers.Authorization = `Bearer ${response.data.accessToken}`;\r\n  //     setToken(response.data.accessToken);\r\n  //     const decoded = jwtDecode(response.data.accessToken);\r\n  //     setName(decoded.name);\r\n  //     setExpire(decoded.exp);\r\n      \r\n  //   }\r\n  //   return config;\r\n  // }, (error)=> {\r\n  //   return Promise.reject(error);\r\n  // });\r\n\r\n  // const getUsers = useCallback(async() => {\r\n  //   try {\r\n  //   const response = await axiosJWT.get('http://localhost:5000/users', {\r\n  //     headers: {\r\n  //       Authorization: `Bearer ${token}`,\r\n  //     }\r\n  //   });\r\n  //   console.log(response.data);\r\n  // } catch (error) {\r\n  //   console.error(error);\r\n  // }\r\n  // }, [axiosJWT, token]);\r\n\r\n  // return (\r\n  //   <div className='container mt-5'>\r\n  //       <h1>Welcome Back: </h1>\r\n  //   </div>\r\n//         <button onClick={getUsers} className='button is-info'>Get Users</button>\r\n//         <table className='table is-striped is-fullwidth'>\r\n//           <thead>\r\n//             <tr>\r\n//               <th>No</th>\r\n//               <th>Name</th>\r\n//               <th>Email</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             { users.map((user, index) => (\r\n//                 <tr key={user.id}>\r\n//                   <td>{index + 1}</td>\r\n//                   <td>{user.name}</td>\r\n//                   <td>{user.email}</td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//     </div>\r\n//  )\r\n// }\r\n\r\nexport default Dashboard\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,IAAIC,SAAS,QAAQ,YAAY;AAClD,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,MAAMC,SAAS,GAAIA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAClC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,CAAC;EACpC;EACA;EACA;;EAEAC,SAAS,CAAC,MAAM;IACdW,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAW;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,6BAA6B,CAAC;MAC/DH,QAAQ,CAACE,QAAQ,CAACE,IAAI,CAACC,WAAW,CAAC;MACnC,MAAMC,OAAO,GAAGb,SAAS,CAACM,KAAK,CAAC;MAChCQ,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;MACxB;IACE,CAAC,CAAC,OAAOG,KAAK,EAAE;MAClB;MACA;IAAA;EAEE,CAAC;AACH,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAb,EAAA,CAjFMD,SAAS;AAAAe,EAAA,GAATf,SAAS;AAmFf,eAAeA,SAAS;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}