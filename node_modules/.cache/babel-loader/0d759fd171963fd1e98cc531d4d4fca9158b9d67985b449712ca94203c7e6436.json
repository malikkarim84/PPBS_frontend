{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { useNavigate } from 'react-router-dom';\nconst Dashboard = () => {\n  _s();\n  const [name, setName] = useState();\n  const [token, setToken] = useState();\n  const [expire, setExpire] = useState();\n  const [users, setUsers] = useState([]);\n  const history = useNavigate();\n  useEffect(() => {\n    refreshToken();\n    getUsers();\n  }, []);\n  const refreshToken = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/token');\n      setToken(response.data.accessToken);\n      const decoded = jwtDecode(response.data.accessToken);\n      setName(decoded.name);\n      setExpire(decoded.exp);\n    } catch (error) {\n      if (error.response) {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  // const axiosJWT = axios.create();\n\n  // axiosJWT.interceptors.request.use(async(config) => {\n  //   const currentDate = new Date();\n  //   if (expire * 1000 < currentDate.getTime()) {\n  //     const response = await axios.get('http://localhost:5000/token');\n  //     config.headers.Authorization = `Bearer ${response.data.accessToken}`;\n  //     setToken(response.data.accessToken);\n  //     const decoded = jwt_decode(response.data.accessToken);\n  //     setName(decoded.name);\n  //     setExpire(decoded.exp);\n\n  //   }\n  //   return config;\n  // }, (error)=> {\n  //   return Promise.reject(error);\n  // });\n\n  // const getUsers = async () => {\n  //   const response = await axiosJWT.get('http://localhost:5000/users', {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`\n  //     }\n  //   });\n  //   setUsers(response.data);\n  // }\n\n  // return (\n  //   <div className='container mt-5'>\n  //       <h1>Welcome Back: </h1>\n  //       <button onClick={getUsers} className='button is-info'>Get Users</button>\n  //       <table className='table is-striped is-fullwidth'>\n  //         <thead>\n  //           <tr>\n  //             <th>No</th>\n  //             <th>Name</th>\n  //             <th>Email</th>\n  //           </tr>\n  //         </thead>\n  //         <tbody>\n  //           { users.map((user, index) => (\n  //               <tr key={user.id}>\n  //                 <td>{index + 1}</td>\n  //                 <td>{user.name}</td>\n  //                 <td>{user.email}</td>\n  //             </tr>\n  //           ))}\n  //         </tbody>\n  //       </table>\n  //   </div>\n  // )\n};\n_s(Dashboard, \"Jc57F3OQwfgnD9YelG5JjCKXOfY=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jwtDecode","useNavigate","Dashboard","_s","name","setName","token","setToken","expire","setExpire","users","setUsers","history","refreshToken","getUsers","response","get","data","accessToken","decoded","exp","error","push","_c","$RefreshReg$"],"sources":["C:/Projek_PPS/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Dashboard  = () => {\r\n  const [name, setName] = useState();\r\n  const [token, setToken] = useState();\r\n  const [expire, setExpire] = useState();\r\n  const [users, setUsers] = useState([]);\r\n  const history = useNavigate();\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    refreshToken();\r\n    getUsers();\r\n  }, []);\r\n\r\n  const refreshToken = async() => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/token');\r\n      setToken(response.data.accessToken);\r\n      const decoded = jwtDecode(response.data.accessToken);\r\n      setName(decoded.name);\r\n      setExpire(decoded.exp);\r\n    } catch (error) {\r\n      if(error.response){\r\n        history.push(\"/\");\r\n      }\r\n    }\r\n  }\r\n\r\n  // const axiosJWT = axios.create();\r\n\r\n  // axiosJWT.interceptors.request.use(async(config) => {\r\n  //   const currentDate = new Date();\r\n  //   if (expire * 1000 < currentDate.getTime()) {\r\n  //     const response = await axios.get('http://localhost:5000/token');\r\n  //     config.headers.Authorization = `Bearer ${response.data.accessToken}`;\r\n  //     setToken(response.data.accessToken);\r\n  //     const decoded = jwt_decode(response.data.accessToken);\r\n  //     setName(decoded.name);\r\n  //     setExpire(decoded.exp);\r\n      \r\n  //   }\r\n  //   return config;\r\n  // }, (error)=> {\r\n  //   return Promise.reject(error);\r\n  // });\r\n\r\n  // const getUsers = async () => {\r\n  //   const response = await axiosJWT.get('http://localhost:5000/users', {\r\n  //     headers: {\r\n  //       Authorization: `Bearer ${token}`\r\n  //     }\r\n  //   });\r\n  //   setUsers(response.data);\r\n  // }\r\n\r\n  // return (\r\n  //   <div className='container mt-5'>\r\n  //       <h1>Welcome Back: </h1>\r\n  //       <button onClick={getUsers} className='button is-info'>Get Users</button>\r\n  //       <table className='table is-striped is-fullwidth'>\r\n  //         <thead>\r\n  //           <tr>\r\n  //             <th>No</th>\r\n  //             <th>Name</th>\r\n  //             <th>Email</th>\r\n  //           </tr>\r\n  //         </thead>\r\n  //         <tbody>\r\n  //           { users.map((user, index) => (\r\n  //               <tr key={user.id}>\r\n  //                 <td>{index + 1}</td>\r\n  //                 <td>{user.name}</td>\r\n  //                 <td>{user.email}</td>\r\n  //             </tr>\r\n  //           ))}\r\n  //         </tbody>\r\n  //       </table>\r\n  //   </div>\r\n  // )\r\n}\r\n\r\nexport default Dashboard\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAIA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,CAAC;EAClC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC;EACpC,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,CAAC;EACtC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMe,OAAO,GAAGX,WAAW,CAAC,CAAC;EAI7BH,SAAS,CAAC,MAAM;IACde,YAAY,CAAC,CAAC;IACdC,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,YAAY,GAAG,MAAAA,CAAA,KAAW;IAC9B,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,6BAA6B,CAAC;MAC/DT,QAAQ,CAACQ,QAAQ,CAACE,IAAI,CAACC,WAAW,CAAC;MACnC,MAAMC,OAAO,GAAGnB,SAAS,CAACe,QAAQ,CAACE,IAAI,CAACC,WAAW,CAAC;MACpDb,OAAO,CAACc,OAAO,CAACf,IAAI,CAAC;MACrBK,SAAS,CAACU,OAAO,CAACC,GAAG,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAGA,KAAK,CAACN,QAAQ,EAAC;QAChBH,OAAO,CAACU,IAAI,CAAC,GAAG,CAAC;MACnB;IACF;EACF,CAAC;;EAED;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAAAnB,EAAA,CA/EKD,SAAS;EAAA,QAKGD,WAAW;AAAA;AAAAsB,EAAA,GALvBrB,SAAS;AAiFf,eAAeA,SAAS;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}